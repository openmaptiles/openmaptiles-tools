#!/usr/bin/env python
"""
This script generates a single SQL statement (either as an SQL function or as a prepared statement),
to generate a vector tile (MVT) for the given zoom and bounding box.

Usage:
  generate-sqltomvt <tileset> [--fname <name>] [--function | --prepared | --query | --psql | --raw] [--mask-layer=<layer> --mask-zoom=<z>]
  generate-sqltomvt --help
  generate-sqltomvt --version

  <tileset>        Tileset definition yaml file

Options:
  -f --function          Generate function generation SQL [default]
  -p --prepared          Generate prepared statement SQL
  -q --query             Generate a query SQL with $1,$2,$3 meaning zoom,x,y
  -d --psql              Generate a query SQL with :zoom,:x,:y vars to simplify PSQL debugging with  \set zoom 5
  -r --raw               Generate raw query without any wrappers (good for debugging SQL)
  --mask-layer=<layer>   If tile only has this layer covering for the whole tile (e.g. 'water'),
                         and requested zoom is more than --mask-zoom parameter, returns empty result
  --mask-zoom=<z>        If --mask-layer is set, tiles will be checked for empty after given zoom  [default: 8]
  --fname=<name>         Name of the generated function  [default: gettile]
  --help                 Show this screen.
  --version              Show version.
"""
from docopt import docopt
import openmaptiles
from openmaptiles.sqltomvt import MvtGenerator

if __name__ == '__main__':
    args = docopt(__doc__, version=openmaptiles.__version__)
    mvt = MvtGenerator(
        tileset=args['<tileset>'],
        mask_layer=args['--mask-layer'],
        mask_zoom=int(args['--mask-zoom']),
    )

    if args['--prepared']:
        sql = mvt.generate_sqltomvt_preparer(args['--fname'])
    elif args['--query']:
        sql = mvt.generate_sqltomvt_query()
    elif args['--psql']:
        sql = mvt.generate_sqltomvt_psql()
    elif args['--raw']:
        sql = mvt.generate_sqltomvt_raw()
    else:
        # --function or default
        sql = mvt.generate_sqltomvt_func(args['--fname'])

    print(sql)
