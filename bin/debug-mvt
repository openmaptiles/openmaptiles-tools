#!/usr/bin/env python
"""
Shows content of a single MVT tile as layer tables.

Usage:
  debug-mvt <tileset> <tile_zxy> [--layer=<layer>]... [--exclude-layers]
                      [--column=<column>]... [--show-names] [--show-geometry]
                      [--no-geom-test] [--no-mvtgeometry] [--null] [--verbose]
                      [--pghost=<host>] [--pgport=<port>] [--dbname=<db>]
                      [--user=<user>] [--password=<password>]
  debug-mvt --help
  debug-mvt --version

  <tileset>             Tileset definition yaml file
  <tile_zxy>            Tile ID, e.g. "10/4/8" for zoom=10, x=4, y=8

Options:
  -l --layer=<layer>    If set, limit tile generation to just this layer (could be multiple)
  -x --exclude-layers   If set, uses all layers except the ones listed with -l (-l is required)
  -c --column=<layer>   If set, limits output to just the given field (could be multiple)
                        All shown layers must have all of these fields, or use -l to limit.
  -n --show-names       if set, includes all localized names
  -g --show-geometry    If set, shows geometry/mvtgeometry as text instead of type+length
  -m --no-mvtgeometry   Do not include resulting MVT geomeetry in the output
  -t --no-geom-test     Do not validate all geometries produced by ST_AsMvtGeom().
  --null                Show nulls for all values and not just for geometries.
  -v --verbose          Print additional debugging information
  --help                Show this screen.
  --version             Show version.

POSTGRES options:
  -h --pghost=<host>    Postgres hostname. By default uses POSTGRES_HOST env or "localhost" if not set.
  -P --pgport=<port>    Postgres port. By default uses POSTGRES_PORT env or "5432" if not set.
  -d --dbname=<db>      Postgres db name. By default uses POSTGRES_DB env or "openmaptiles" if not set.
  -U --user=<user>      Postgres user. By default uses POSTGRES_USER env or "openmaptiles" if not set.
  --password=<password> Postgres password. By default uses POSTGRES_PASSWORD env or "openmaptiles" if not set.
"""
import asyncio
import re

import asyncpg
from docopt import docopt, DocoptExit
from tabulate import tabulate

import openmaptiles
from openmaptiles.pgutils import parse_pg_args, get_postgis_version
from openmaptiles.sqltomvt import MvtGenerator
from openmaptiles.tileset import Tileset


async def main(args):
    pghost, pgport, dbname, user, password = parse_pg_args(args)
    exclude_layers = args['--exclude-layers']
    layers = args['--layer']
    columns = args['--column']
    show_names = args['--show-names']
    show_geometry = args['--show-geometry']
    show_mvt_geometry = not args['--no-mvtgeometry']
    show_nulls = args['--null']
    test_geometry = not args['--no-geom-test']
    verbose = args['--verbose']
    tileset_path = args['<tileset>']
    zxy = args['<tile_zxy>']
    if not re.match(r'\d+/\d+/\d+', zxy):
        raise DocoptExit('Invalid <tile_zxy> - must be in the form "zoom/x/y"')
    zoom, x, y = [int(v) for v in zxy.split('/')]

    tileset = Tileset.parse(tileset_path)
    conn = await asyncpg.connect(
        database=dbname, host=pghost, port=pgport, user=user, password=password,
    )

    messages = []

    def connection_logger(_, msg: asyncpg.PostgresLogMessage):
        messages.append(msg)

    def print_messages():
        nonlocal messages
        for msg in messages:
            try:
                # noinspection PyUnresolvedReferences
                print(f"  {msg.severity}: {msg.message} @ {msg.context}")
            except AttributeError:
                print(f"  {msg}")
        messages = []

    conn.add_log_listener(connection_logger)
    mvt = MvtGenerator(
        tileset,
        zoom=zoom, x=x, y=y,
        layer_ids=layers,
        exclude_layers=exclude_layers,
        postgis_ver=await get_postgis_version(conn),
    )

    def geom_info(expr):
        return f"GeometryType({expr}) || '(' || ST_MemSize({expr}) || ')'"

    def mvt_wrapper(mvt_geom):
        if test_geometry:
            res = f"ST_IsValid({mvt_geom}) AS is_valid_mvt, "
        else:
            res = ''
        if show_geometry:
            res += f"ST_AsText({mvt_geom})"
        else:
            res += geom_info(f"ST_AsText({mvt_geom})")
        return res

    for layer_id, layer_def in mvt.get_layers():
        geom_fld = layer_def.geometry_field

        if show_geometry:
            extra_columns = f"ST_SRID({geom_fld}) || ': ' || " \
                            f"ST_AsText({geom_fld}) AS {geom_fld}"
        else:
            extra_columns = f"{geom_info(geom_fld)} AS {geom_fld}"
        if test_geometry:
            extra_columns += f', ST_IsValid({geom_fld}) AS is_valid_geom'

        query = mvt.layer_to_query(
            layer_def,
            to_mvt_geometry=show_mvt_geometry,
            mvt_geometry_wrapper=mvt_wrapper,
            extra_columns=extra_columns,
            languages_sql=None if show_names else f'NULL as _hidden_names_',
        )
        layer_sql = mvt.generate_layer(layer_def)
        if verbose:
            print(f"\n======= Querying layer {layer_id} =======\n{query.strip()}\n"
                  f"== MVT SQL\n{layer_sql}")

        # Re-order columns - move osm_id and geometry fields to the right of the table
        names = {
            layer_def.key_field: 'zzz0',
            'is_valid_mvt': 'zzz1',
            'mvtgeometry': 'zzz2',
            'is_valid_geom': 'zzz3',
            geom_fld: 'zzz4',
        }

        result = []
        fields = ','.join(columns) if columns else '*'
        has_names = False
        for row in await conn.fetch(f"SELECT {fields} FROM {query}"):
            vals = list(row.items())
            if not columns:
                vals.sort(key=lambda v: names[v[0]] if v[0] in names else v[0])
            vals = {
                k: '<null>' if v is None and (show_nulls or k in names) else v
                for k, v in vals if k != '_hidden_names_'
            }
            result.append(vals)

        layer_mvt = len(await conn.fetchval(layer_sql))

        if result:
            info = ' (extra name columns are hidden by default) ' if has_names else ''
            print(f"======= Layer {layer_id}{info}: {layer_mvt:,} bytes in MVT =======")
            print_messages()
            print(tabulate(result, headers="keys"))
        else:
            info = f' (layer data had non-zero {layer_mvt} bytes)' if layer_mvt else ''
            print(f"======= No data in layer {layer_id}{info}")
            print_messages()


if __name__ == '__main__':
    asyncio.run(main(docopt(__doc__, version=openmaptiles.__version__)))
